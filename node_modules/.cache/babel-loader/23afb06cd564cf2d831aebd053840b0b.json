{"ast":null,"code":"import _classCallCheck from \"/Users/simranrai/Google Drive/Udacity/React Nanodegree/4. React and Redux/rend-p2-would-you-rather/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/simranrai/Google Drive/Udacity/React Nanodegree/4. React and Redux/rend-p2-would-you-rather/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/simranrai/Google Drive/Udacity/React Nanodegree/4. React and Redux/rend-p2-would-you-rather/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/simranrai/Google Drive/Udacity/React Nanodegree/4. React and Redux/rend-p2-would-you-rather/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/simranrai/Google Drive/Udacity/React Nanodegree/4. React and Redux/rend-p2-would-you-rather/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/simranrai/Google Drive/Udacity/React Nanodegree/4. React and Redux/rend-p2-would-you-rather/src/components/Dashboard.js\";\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport Question from \"./Question.js\";\nimport QuestionView from \"./QuestionView\";\n\nvar Dashboard =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Dashboard, _Component);\n\n  function Dashboard() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Dashboard);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Dashboard)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      unansweredButtonIsActive: true\n    };\n    return _this;\n  }\n\n  _createClass(Dashboard, [{\n    key: \"filterQuestions\",\n    value: function filterQuestions(questions, authedUser) {\n      var filteredQuestions = Object.values(questions);\n      console.log(filteredQuestions);\n      filteredQuestions = this.props.questionIds.map(function (qid) {\n        return filteredQuestions[qid];\n      });\n      console.log(filteredQuestions);\n      var showUnansweredQuestions = this.state.unansweredButtonIsActive;\n\n      if (filteredQuestions.length === 0) {\n        return null;\n      } // Unanswered questions list\n\n\n      if (showUnansweredQuestions) {\n        return filteredQuestions.filter(function (question) {\n          return question.optionOne.votes.indexOf(authedUser) === -1 && question.optionTwo.votes.indexOf(authedUser) === -1;\n        });\n      } // Answered questions list\n\n\n      if (!showUnansweredQuestions) {\n        return filteredQuestions.filter(function (question) {\n          return question.optionOne.votes.indexOf(authedUser) !== -1 || question.optionTwo.votes.indexOf(authedUser) !== -1;\n        });\n      }\n    }\n  }, {\n    key: \"handleActiveButtonClick\",\n    value: function handleActiveButtonClick(event) {\n      if (event.target.id === \"unanswered-poll-button\") {\n        this.setState({\n          unansweredButtonIsActive: true\n        });\n      }\n\n      if (event.target.id === \"answered-poll-button\") {\n        this.setState({\n          unansweredButtonIsActive: false\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      // Return an array of questions to be displayed\n      var filteredQuestionsToDisplay = this.filterQuestions(this.props.questions, this.props.authedUser);\n\n      if (filteredQuestionsToDisplay === null) {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 65\n          },\n          __self: this\n        }, \"Loading...\");\n      }\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }, \"Dashboard\"), React.createElement(\"div\", {\n        className: \"center-flex-items\",\n        onClick: this.handleActiveButtonClick.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        className: \"btn btn-primary \" + (this.state.unansweredButtonIsActive ? \"active\" : \"\"),\n        id: \"unanswered-poll-button\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      }, \"Unanswered Polls\"), React.createElement(\"button\", {\n        className: \"btn btn-primary \" + (this.state.unansweredButtonIsActive ? \"\" : \"active\"),\n        id: \"answered-poll-button\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      }, \"Answered Polls\")), React.createElement(\"ul\", {\n        className: \"center center-flex-items\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96\n        },\n        __self: this\n      }, filteredQuestionsToDisplay.map(function (question) {\n        return React.createElement(\"li\", {\n          key: question.id,\n          className: \"question-border\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 98\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 99\n          },\n          __self: this\n        }, \"Question ID: \", question.id), React.createElement(Question, {\n          id: question.id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 100\n          },\n          __self: this\n        }));\n      })));\n    }\n  }]);\n\n  return Dashboard;\n}(Component); // Get necessary information from Redux store state\n\n\nfunction mapStateToProps(_ref) {\n  var questions = _ref.questions,\n      authedUser = _ref.authedUser;\n  return {\n    questions: questions,\n    questionIds: Object.keys(questions).sort(function (a, b) {\n      return questions[a].timestamp - questions[b].timestamp;\n    }),\n    authedUser: authedUser\n  };\n}\n\nexport default connect(mapStateToProps)(Dashboard);\n/*\nBasically, you destructure anything you want from the state being passed into mapStateToProps and then create an object that is the props used in your Dashboard component which is referred to as 'this.props.'\n\nRead this carefully: You create a store. Then pass that to your components using <Provider />. Then you can establish a connection to the store between your components using the connect()() function. The connect()() function takes in a function to be called and the component. Within the function that will be called, you can destructure items from the state/store and then create a object with that information. The component can then access those props using this.props.\n*/","map":{"version":3,"sources":["/Users/simranrai/Google Drive/Udacity/React Nanodegree/4. React and Redux/rend-p2-would-you-rather/src/components/Dashboard.js"],"names":["React","Component","connect","Question","QuestionView","Dashboard","state","unansweredButtonIsActive","questions","authedUser","filteredQuestions","Object","values","console","log","props","questionIds","map","qid","showUnansweredQuestions","length","filter","question","optionOne","votes","indexOf","optionTwo","event","target","id","setState","filteredQuestionsToDisplay","filterQuestions","handleActiveButtonClick","bind","mapStateToProps","keys","sort","a","b","timestamp"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport Question from \"./Question.js\";\nimport QuestionView from \"./QuestionView\";\n\nclass Dashboard extends Component {\n  state = {\n    unansweredButtonIsActive: true\n  };\n\n  filterQuestions(questions, authedUser) {\n    let filteredQuestions = Object.values(questions);\n    console.log(filteredQuestions);\n    filteredQuestions = this.props.questionIds.map(\n      qid => filteredQuestions[qid]\n    );\n    console.log(filteredQuestions);\n\n    let showUnansweredQuestions = this.state.unansweredButtonIsActive;\n\n    if (filteredQuestions.length === 0) {\n      return null;\n    }\n\n    // Unanswered questions list\n    if (showUnansweredQuestions) {\n      return filteredQuestions.filter(\n        question =>\n          question.optionOne.votes.indexOf(authedUser) === -1 &&\n          question.optionTwo.votes.indexOf(authedUser) === -1\n      );\n    }\n\n    // Answered questions list\n    if (!showUnansweredQuestions) {\n      return filteredQuestions.filter(\n        question =>\n          question.optionOne.votes.indexOf(authedUser) !== -1 ||\n          question.optionTwo.votes.indexOf(authedUser) !== -1\n      );\n    }\n  }\n\n  handleActiveButtonClick(event) {\n    if (event.target.id === \"unanswered-poll-button\") {\n      this.setState({\n        unansweredButtonIsActive: true\n      });\n    }\n    if (event.target.id === \"answered-poll-button\") {\n      this.setState({\n        unansweredButtonIsActive: false\n      });\n    }\n  }\n\n  render() {\n    // Return an array of questions to be displayed\n    let filteredQuestionsToDisplay = this.filterQuestions(\n      this.props.questions,\n      this.props.authedUser\n    );\n\n    if (filteredQuestionsToDisplay === null) {\n      return <div>Loading...</div>;\n    }\n\n    return (\n      <div>\n        <h2>Dashboard</h2>\n\n        <div\n          className=\"center-flex-items\"\n          onClick={this.handleActiveButtonClick.bind(this)}\n        >\n          <button\n            className={\n              \"btn btn-primary \" +\n              (this.state.unansweredButtonIsActive ? \"active\" : \"\")\n            }\n            id=\"unanswered-poll-button\"\n          >\n            Unanswered Polls\n          </button>\n          <button\n            className={\n              \"btn btn-primary \" +\n              (this.state.unansweredButtonIsActive ? \"\" : \"active\")\n            }\n            id=\"answered-poll-button\"\n          >\n            Answered Polls\n          </button>\n        </div>\n\n        <ul className=\"center center-flex-items\">\n          {filteredQuestionsToDisplay.map(question => (\n            <li key={question.id} className=\"question-border\">\n              <div>Question ID: {question.id}</div>\n              <Question id={question.id} />\n            </li>\n          ))}\n        </ul>\n      </div>\n    );\n  }\n}\n\n// Get necessary information from Redux store state\nfunction mapStateToProps({ questions, authedUser }) {\n  return {\n    questions,\n    questionIds: Object.keys(questions).sort(\n      (a, b) => questions[a].timestamp - questions[b].timestamp\n    ),\n    authedUser: authedUser\n  };\n}\n\nexport default connect(mapStateToProps)(Dashboard);\n\n/*\nBasically, you destructure anything you want from the state being passed into mapStateToProps and then create an object that is the props used in your Dashboard component which is referred to as 'this.props.'\n\nRead this carefully: You create a store. Then pass that to your components using <Provider />. Then you can establish a connection to the store between your components using the connect()() function. The connect()() function takes in a function to be called and the component. Within the function that will be called, you can destructure items from the state/store and then create a object with that information. The component can then access those props using this.props.\n*/\n"]},"metadata":{},"sourceType":"module"}