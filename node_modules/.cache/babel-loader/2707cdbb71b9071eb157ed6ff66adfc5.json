{"ast":null,"code":"import _classCallCheck from \"/Users/simranrai/Google Drive/Udacity/React Nanodegree/4. React and Redux/rend-p2-would-you-rather/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/simranrai/Google Drive/Udacity/React Nanodegree/4. React and Redux/rend-p2-would-you-rather/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/simranrai/Google Drive/Udacity/React Nanodegree/4. React and Redux/rend-p2-would-you-rather/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/simranrai/Google Drive/Udacity/React Nanodegree/4. React and Redux/rend-p2-would-you-rather/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/simranrai/Google Drive/Udacity/React Nanodegree/4. React and Redux/rend-p2-would-you-rather/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/simranrai/Google Drive/Udacity/React Nanodegree/4. React and Redux/rend-p2-would-you-rather/src/components/Question.js\";\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\nimport { handleAnswerQuestion } from \"../actions/questions\";\n\nvar Question =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Question, _Component);\n\n  function Question() {\n    _classCallCheck(this, Question);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Question).apply(this, arguments));\n  }\n\n  _createClass(Question, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      console.log(\"Hellooooooooo what uPPPPPPP\");\n      console.log(this.props.users);\n    }\n  }, {\n    key: \"handleAnswerClick\",\n    value: function handleAnswerClick(e) {\n      var _this$props = this.props,\n          dispatch = _this$props.dispatch,\n          authedUser = _this$props.authedUser,\n          question = _this$props.question;\n      var answer = e.target.id;\n      console.log(e.target); // need to pass it an info object that contains authedUser, qId, and answer\n\n      if (question.optionOne.votes.indexOf(authedUser) === -1 && question.optionTwo.votes.indexOf(authedUser) === -1) {\n        dispatch(handleAnswerQuestion({\n          authedUser: authedUser,\n          qId: question.id,\n          answer: answer\n        }));\n      } else {\n        alert(\"Oh yup. You can only select one answer!\");\n      }\n    }\n  }, {\n    key: \"showVotesCount\",\n    value: function showVotesCount(opt1Disabled, opt2Disabled) {\n      if (opt1Disabled || opt2Disabled) {\n        // calculate the total votes\n        // calculate votes & percent for 1\n        // calculate votes & percent for 2\n        // return an object containing the vote information\n        var opt1Votes = this.props.questions[this.props.question.id].optionOne.votes.length; // votes of option 1\n\n        var opt2Votes = this.props.questions[this.props.question.id].optionTwo.votes.length; // votes of option 2\n\n        var totalVotes = opt1Votes + opt2Votes; // total votes\n\n        var opt1Percent = (opt1Votes / totalVotes * 100).toFixed(1);\n        var opt2Percent = (opt2Votes / totalVotes * 100).toFixed(1);\n        console.log(opt1Percent, typeof opt2Percent);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var id = this.props.id; // todo: call function to check if authedUser already answered question -> alert if they did\n      // todo: disable clicking if already answered\n\n      var avatarUrl = this.props.users[this.props.question.author].avatarURL;\n      var isDisabled1 = this.props.question.optionOne.votes.indexOf(this.props.authedUser) !== -1;\n      var isDisabled2 = this.props.question.optionTwo.votes.indexOf(this.props.authedUser) !== -1;\n      this.showVotesCount(isDisabled1, isDisabled2);\n      return React.createElement(Link, {\n        to: \"/questions/\".concat(id),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"center-flex-items\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        className: \"avatar\",\n        src: avatarUrl,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      })), React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }, \"Would you rather...\"), React.createElement(\"div\", {\n        className: \"center-options-buttons\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        onClick: this.handleAnswerClick.bind(this),\n        className: \"btn btn-primary \",\n        id: \"optionOne\",\n        disabled: isDisabled1,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }, this.props.firstOption), React.createElement(\"button\", {\n        onClick: this.handleAnswerClick.bind(this),\n        className: \"btn btn-primary \",\n        id: \"optionTwo\",\n        disabled: isDisabled2,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      }, this.props.secondOption)));\n    }\n  }]);\n\n  return Question;\n}(Component); // The first argument is data we are destructuring from the store { authedUser, users, questions }\n// The second argument is the regular props being passed into the Question component { id }\n\n\nfunction mapStateToProps(_ref, _ref2) {\n  var authedUser = _ref.authedUser,\n      users = _ref.users,\n      questions = _ref.questions;\n  var id = _ref2.id;\n  var question = questions[id];\n  var firstOption = question.optionOne.text;\n  var secondOption = question.optionTwo.text;\n  var user = users[id];\n  return {\n    authedUser: authedUser,\n    firstOption: firstOption,\n    secondOption: secondOption,\n    question: question,\n    questions: questions,\n    users: users // question: formatQuestion(question)\n\n  };\n}\n\nexport default connect(mapStateToProps)(Question);","map":{"version":3,"sources":["/Users/simranrai/Google Drive/Udacity/React Nanodegree/4. React and Redux/rend-p2-would-you-rather/src/components/Question.js"],"names":["React","Component","connect","BrowserRouter","Router","Route","Link","handleAnswerQuestion","Question","console","log","props","users","e","dispatch","authedUser","question","answer","target","id","optionOne","votes","indexOf","optionTwo","qId","alert","opt1Disabled","opt2Disabled","opt1Votes","questions","length","opt2Votes","totalVotes","opt1Percent","toFixed","opt2Percent","avatarUrl","author","avatarURL","isDisabled1","isDisabled2","showVotesCount","handleAnswerClick","bind","firstOption","secondOption","mapStateToProps","text","user"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\nimport { handleAnswerQuestion } from \"../actions/questions\";\n\nclass Question extends Component {\n  componentDidMount() {\n    console.log(\"Hellooooooooo what uPPPPPPP\");\n    console.log(this.props.users);\n  }\n  handleAnswerClick(e) {\n    const { dispatch, authedUser, question } = this.props;\n    const answer = e.target.id;\n    console.log(e.target);\n    // need to pass it an info object that contains authedUser, qId, and answer\n    if (\n      question.optionOne.votes.indexOf(authedUser) === -1 &&\n      question.optionTwo.votes.indexOf(authedUser) === -1\n    ) {\n      dispatch(\n        handleAnswerQuestion({\n          authedUser,\n          qId: question.id,\n          answer\n        })\n      );\n    } else {\n      alert(\"Oh yup. You can only select one answer!\");\n    }\n  }\n\n  showVotesCount(opt1Disabled, opt2Disabled) {\n    if (opt1Disabled || opt2Disabled) {\n      // calculate the total votes\n      // calculate votes & percent for 1\n      // calculate votes & percent for 2\n      // return an object containing the vote information\n      let opt1Votes = this.props.questions[this.props.question.id].optionOne\n        .votes.length; // votes of option 1\n      let opt2Votes = this.props.questions[this.props.question.id].optionTwo\n        .votes.length; // votes of option 2\n      let totalVotes = opt1Votes + opt2Votes; // total votes\n      let opt1Percent = ((opt1Votes / totalVotes) * 100).toFixed(1);\n      let opt2Percent = ((opt2Votes / totalVotes) * 100).toFixed(1);\n      console.log(opt1Percent, typeof opt2Percent);\n    }\n  }\n\n  render() {\n    const id = this.props.id;\n    // todo: call function to check if authedUser already answered question -> alert if they did\n    // todo: disable clicking if already answered\n    let avatarUrl = this.props.users[this.props.question.author].avatarURL;\n\n    let isDisabled1 =\n      this.props.question.optionOne.votes.indexOf(this.props.authedUser) !== -1;\n    let isDisabled2 =\n      this.props.question.optionTwo.votes.indexOf(this.props.authedUser) !== -1;\n\n    this.showVotesCount(isDisabled1, isDisabled2);\n\n    return (\n      <Link to={`/questions/${id}`}>\n        <div className=\"center-flex-items\">\n          <img className=\"avatar\" src={avatarUrl} />\n        </div>\n        <h3>Would you rather...</h3>\n\n        <div className=\"center-options-buttons\">\n          <button\n            onClick={this.handleAnswerClick.bind(this)}\n            className=\"btn btn-primary \"\n            id=\"optionOne\"\n            disabled={isDisabled1}\n          >\n            {this.props.firstOption}\n          </button>\n          <button\n            onClick={this.handleAnswerClick.bind(this)}\n            className=\"btn btn-primary \"\n            id=\"optionTwo\"\n            disabled={isDisabled2}\n          >\n            {this.props.secondOption}\n          </button>\n        </div>\n      </Link>\n    );\n  }\n}\n\n// The first argument is data we are destructuring from the store { authedUser, users, questions }\n// The second argument is the regular props being passed into the Question component { id }\nfunction mapStateToProps({ authedUser, users, questions }, { id }) {\n  const question = questions[id];\n  const firstOption = question.optionOne.text;\n  const secondOption = question.optionTwo.text;\n  const user = users[id];\n  return {\n    authedUser,\n    firstOption,\n    secondOption,\n    question,\n    questions,\n    users\n    // question: formatQuestion(question)\n  };\n}\n\nexport default connect(mapStateToProps)(Question);\n"]},"metadata":{},"sourceType":"module"}