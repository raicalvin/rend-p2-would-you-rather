{"ast":null,"code":"import _classCallCheck from \"/Users/simranrai/Google Drive/Udacity/React Nanodegree/4. React and Redux/rend-p2-would-you-rather/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/simranrai/Google Drive/Udacity/React Nanodegree/4. React and Redux/rend-p2-would-you-rather/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/simranrai/Google Drive/Udacity/React Nanodegree/4. React and Redux/rend-p2-would-you-rather/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/simranrai/Google Drive/Udacity/React Nanodegree/4. React and Redux/rend-p2-would-you-rather/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/simranrai/Google Drive/Udacity/React Nanodegree/4. React and Redux/rend-p2-would-you-rather/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/simranrai/Google Drive/Udacity/React Nanodegree/4. React and Redux/rend-p2-would-you-rather/src/components/Dashboard.js\";\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport Question from \"./Question.js\";\n\nvar Dashboard =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Dashboard, _Component);\n\n  function Dashboard() {\n    _classCallCheck(this, Dashboard);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Dashboard).apply(this, arguments));\n  }\n\n  _createClass(Dashboard, [{\n    key: \"render\",\n    value: function render() {\n      console.log(this.props.questionIds);\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 9\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        className: \"center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 10\n        },\n        __self: this\n      }, \"Dashboard\"), React.createElement(\"button\", {\n        className: \"btn btn-primary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 11\n        },\n        __self: this\n      }, \"Unanswered Polls\"), React.createElement(\"button\", {\n        className: \"btn btn-primary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 12\n        },\n        __self: this\n      }, \"Answered Polls\"), React.createElement(\"ul\", {\n        className: \"center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 13\n        },\n        __self: this\n      }, this.props.questionIds.map(function (id) {\n        return React.createElement(\"li\", {\n          key: id,\n          className: \"question-border\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 15\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 16\n          },\n          __self: this\n        }, \"Question ID: \", id), React.createElement(Question, {\n          id: id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 17\n          },\n          __self: this\n        }));\n      })));\n    }\n  }]);\n\n  return Dashboard;\n}(Component); // Get necessary information from Redux store state\n\n\nfunction mapStateToProps(_ref) {\n  var questions = _ref.questions;\n  return {\n    questionIds: Object.keys(questions).sort(function (a, b) {\n      return questions[b].timestamp - questions[a].timestamp;\n    })\n  };\n}\n\nexport default connect(mapStateToProps)(Dashboard);\n/*\nBasically, you destructure anything you want from the state being passed into mapStateToProps and then create an object that is the props used in your Dashboard component which is referred to as 'this.props.'\n\nRead this carefully: You create a store. Then pass that to your components using <Provider />. Then you can establish a connection to the store between your components using the connect()() function. The connect()() function takes in a function to be called and the component. Within the function that will be called, you can destructure items from the state/store and then create a object with that information. The component can then access those props using this.props.\n*/","map":{"version":3,"sources":["/Users/simranrai/Google Drive/Udacity/React Nanodegree/4. React and Redux/rend-p2-would-you-rather/src/components/Dashboard.js"],"names":["React","Component","connect","Question","Dashboard","console","log","props","questionIds","map","id","mapStateToProps","questions","Object","keys","sort","a","b","timestamp"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,QAAP,MAAqB,eAArB;;IAEMC,S;;;;;;;;;;;;;6BACK;AACPC,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKC,KAAL,CAAWC,WAAvB;AACA,aACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAI,QAAA,SAAS,EAAC,QAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADF,EAEE;AAAQ,QAAA,SAAS,EAAC,iBAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAFF,EAGE;AAAQ,QAAA,SAAS,EAAC,iBAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAHF,EAIE;AAAI,QAAA,SAAS,EAAC,QAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACG,KAAKD,KAAL,CAAWC,WAAX,CAAuBC,GAAvB,CAA2B,UAAAC,EAAE;AAAA,eAC5B;AAAI,UAAA,GAAG,EAAEA,EAAT;AAAa,UAAA,SAAS,EAAC,iBAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAAmBA,EAAnB,CADF,EAEE,oBAAC,QAAD;AAAU,UAAA,EAAE,EAAEA,EAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAFF,CAD4B;AAAA,OAA7B,CADH,CAJF,CADF;AAeD;;;;EAlBqBT,S,GAqBxB;;;AACA,SAASU,eAAT,OAAwC;AAAA,MAAbC,SAAa,QAAbA,SAAa;AACtC,SAAO;AACLJ,IAAAA,WAAW,EAAEK,MAAM,CAACC,IAAP,CAAYF,SAAZ,EAAuBG,IAAvB,CACX,UAACC,CAAD,EAAIC,CAAJ;AAAA,aAAUL,SAAS,CAACK,CAAD,CAAT,CAAaC,SAAb,GAAyBN,SAAS,CAACI,CAAD,CAAT,CAAaE,SAAhD;AAAA,KADW;AADR,GAAP;AAKD;;AAED,eAAehB,OAAO,CAACS,eAAD,CAAP,CAAyBP,SAAzB,CAAf;AAEA","sourcesContent":["import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport Question from \"./Question.js\";\n\nclass Dashboard extends Component {\n  render() {\n    console.log(this.props.questionIds);\n    return (\n      <div>\n        <h2 className=\"center\">Dashboard</h2>\n        <button className=\"btn btn-primary\">Unanswered Polls</button>\n        <button className=\"btn btn-primary\">Answered Polls</button>\n        <ul className=\"center\">\n          {this.props.questionIds.map(id => (\n            <li key={id} className=\"question-border\">\n              <div>Question ID: {id}</div>\n              <Question id={id} />\n            </li>\n          ))}\n        </ul>\n      </div>\n    );\n  }\n}\n\n// Get necessary information from Redux store state\nfunction mapStateToProps({ questions }) {\n  return {\n    questionIds: Object.keys(questions).sort(\n      (a, b) => questions[b].timestamp - questions[a].timestamp\n    )\n  };\n}\n\nexport default connect(mapStateToProps)(Dashboard);\n\n/*\nBasically, you destructure anything you want from the state being passed into mapStateToProps and then create an object that is the props used in your Dashboard component which is referred to as 'this.props.'\n\nRead this carefully: You create a store. Then pass that to your components using <Provider />. Then you can establish a connection to the store between your components using the connect()() function. The connect()() function takes in a function to be called and the component. Within the function that will be called, you can destructure items from the state/store and then create a object with that information. The component can then access those props using this.props.\n*/\n"]},"metadata":{},"sourceType":"module"}