{"ast":null,"code":"import { saveQuestionAnswer, saveQuestion } from \"../utils/api\";\nexport var RECEIVE_QUESTIONS = \"RECEIVE_QUESTIONS\";\nexport var ANSWER_QUESTION = \"ANSWER_QUESTION\";\nexport var ADD_QUESTION = \"ADD_QUESTION\"; // Action Creator for receiving questions\n\nexport function receiveQuestions(questions) {\n  return {\n    type: RECEIVE_QUESTIONS,\n    questions: questions\n  };\n}\n\nfunction answerQuestion(_ref) {\n  var authedUser = _ref.authedUser,\n      qid = _ref.qid,\n      answer = _ref.answer;\n  return {\n    type: ANSWER_QUESTION,\n    authedUser: authedUser,\n    qid: qid,\n    answer: answer // optionOne or optionTwo\n\n  };\n} // This asynchronous action creator which will be responsible for invoking the saveQuestionAnswer function:\n\n\nexport function handleAnswerQuestion(info) {\n  // return a function so we can dispatch whatever we like\n  return function (dispatch, getState) {\n    // dispatch and getState are STORE methods\n    var _getState = getState(),\n        authedUser = _getState.authedUser; // get the authenticated user from the store state\n    // todo: create the paylod to pass to answerQuestion\n\n\n    var payload = {\n      authedUser: authedUser,\n      qid: info.qId,\n      answer: info.answer\n    };\n    console.log(payload); // todo: invoke answerQuestion in dispatch, returning an object and running it through the reducers\n\n    return saveQuestionAnswer(payload).then(function () {\n      return dispatch(answerQuestion(payload));\n    });\n  };\n} // ============ SAVE QUESTION\n// action creator\n\nfunction addQuestion(question) {\n  return {\n    type: ADD_QUESTION,\n    question: question\n  };\n} // asynchronous action creator\n\n\nexport function handleAddQuestion(info) {\n  return function (dispatch, getState) {\n    var _getState2 = getState(),\n        authedUser = _getState2.authedUser;\n\n    return addQuestion({});\n  };\n}","map":{"version":3,"sources":["/Users/simranrai/Google Drive/Udacity/React Nanodegree/4. React and Redux/rend-p2-would-you-rather/src/actions/questions.js"],"names":["saveQuestionAnswer","saveQuestion","RECEIVE_QUESTIONS","ANSWER_QUESTION","ADD_QUESTION","receiveQuestions","questions","type","answerQuestion","authedUser","qid","answer","handleAnswerQuestion","info","dispatch","getState","payload","qId","console","log","then","addQuestion","question","handleAddQuestion"],"mappings":"AAAA,SAASA,kBAAT,EAA6BC,YAA7B,QAAiD,cAAjD;AAEA,OAAO,IAAMC,iBAAiB,GAAG,mBAA1B;AACP,OAAO,IAAMC,eAAe,GAAG,iBAAxB;AACP,OAAO,IAAMC,YAAY,GAAG,cAArB,C,CAEP;;AACA,OAAO,SAASC,gBAAT,CAA0BC,SAA1B,EAAqC;AAC1C,SAAO;AACLC,IAAAA,IAAI,EAAEL,iBADD;AAELI,IAAAA,SAAS,EAATA;AAFK,GAAP;AAID;;AAED,SAASE,cAAT,OAAqD;AAAA,MAA3BC,UAA2B,QAA3BA,UAA2B;AAAA,MAAfC,GAAe,QAAfA,GAAe;AAAA,MAAVC,MAAU,QAAVA,MAAU;AACnD,SAAO;AACLJ,IAAAA,IAAI,EAAEJ,eADD;AAELM,IAAAA,UAAU,EAAVA,UAFK;AAGLC,IAAAA,GAAG,EAAHA,GAHK;AAILC,IAAAA,MAAM,EAANA,MAJK,CAIE;;AAJF,GAAP;AAMD,C,CAED;;;AACA,OAAO,SAASC,oBAAT,CAA8BC,IAA9B,EAAoC;AACzC;AACA,SAAO,UAACC,QAAD,EAAWC,QAAX,EAAwB;AAC7B;AAD6B,oBAENA,QAAQ,EAFF;AAAA,QAErBN,UAFqB,aAErBA,UAFqB,EAEM;AACnC;;;AACA,QAAMO,OAAO,GAAG;AACdP,MAAAA,UAAU,EAAVA,UADc;AAEdC,MAAAA,GAAG,EAAEG,IAAI,CAACI,GAFI;AAGdN,MAAAA,MAAM,EAAEE,IAAI,CAACF;AAHC,KAAhB;AAKAO,IAAAA,OAAO,CAACC,GAAR,CAAYH,OAAZ,EAT6B,CAU7B;;AACA,WAAOhB,kBAAkB,CAACgB,OAAD,CAAlB,CAA4BI,IAA5B,CAAiC;AAAA,aACtCN,QAAQ,CAACN,cAAc,CAACQ,OAAD,CAAf,CAD8B;AAAA,KAAjC,CAAP;AAGD,GAdD;AAeD,C,CAED;AACA;;AACA,SAASK,WAAT,CAAqBC,QAArB,EAA+B;AAC7B,SAAO;AACLf,IAAAA,IAAI,EAAEH,YADD;AAELkB,IAAAA,QAAQ,EAARA;AAFK,GAAP;AAID,C,CAED;;;AACA,OAAO,SAASC,iBAAT,CAA2BV,IAA3B,EAAiC;AACtC,SAAO,UAACC,QAAD,EAAWC,QAAX,EAAwB;AAAA,qBACNA,QAAQ,EADF;AAAA,QACrBN,UADqB,cACrBA,UADqB;;AAE7B,WAAOY,WAAW,CAAC,EAAD,CAAlB;AACD,GAHD;AAID","sourcesContent":["import { saveQuestionAnswer, saveQuestion } from \"../utils/api\";\n\nexport const RECEIVE_QUESTIONS = \"RECEIVE_QUESTIONS\";\nexport const ANSWER_QUESTION = \"ANSWER_QUESTION\";\nexport const ADD_QUESTION = \"ADD_QUESTION\";\n\n// Action Creator for receiving questions\nexport function receiveQuestions(questions) {\n  return {\n    type: RECEIVE_QUESTIONS,\n    questions\n  };\n}\n\nfunction answerQuestion({ authedUser, qid, answer }) {\n  return {\n    type: ANSWER_QUESTION,\n    authedUser,\n    qid,\n    answer // optionOne or optionTwo\n  };\n}\n\n// This asynchronous action creator which will be responsible for invoking the saveQuestionAnswer function:\nexport function handleAnswerQuestion(info) {\n  // return a function so we can dispatch whatever we like\n  return (dispatch, getState) => {\n    // dispatch and getState are STORE methods\n    const { authedUser } = getState(); // get the authenticated user from the store state\n    // todo: create the paylod to pass to answerQuestion\n    const payload = {\n      authedUser,\n      qid: info.qId,\n      answer: info.answer\n    };\n    console.log(payload);\n    // todo: invoke answerQuestion in dispatch, returning an object and running it through the reducers\n    return saveQuestionAnswer(payload).then(() =>\n      dispatch(answerQuestion(payload))\n    );\n  };\n}\n\n// ============ SAVE QUESTION\n// action creator\nfunction addQuestion(question) {\n  return {\n    type: ADD_QUESTION,\n    question\n  };\n}\n\n// asynchronous action creator\nexport function handleAddQuestion(info) {\n  return (dispatch, getState) => {\n    const { authedUser } = getState();\n    return addQuestion({});\n  };\n}\n"]},"metadata":{},"sourceType":"module"}