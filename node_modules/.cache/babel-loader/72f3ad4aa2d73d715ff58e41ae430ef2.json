{"ast":null,"code":"import _classCallCheck from \"/Users/simranrai/Google Drive/Udacity/React Nanodegree/4. React and Redux/rend-p2-would-you-rather/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/simranrai/Google Drive/Udacity/React Nanodegree/4. React and Redux/rend-p2-would-you-rather/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/simranrai/Google Drive/Udacity/React Nanodegree/4. React and Redux/rend-p2-would-you-rather/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/simranrai/Google Drive/Udacity/React Nanodegree/4. React and Redux/rend-p2-would-you-rather/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/simranrai/Google Drive/Udacity/React Nanodegree/4. React and Redux/rend-p2-would-you-rather/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/simranrai/Google Drive/Udacity/React Nanodegree/4. React and Redux/rend-p2-would-you-rather/src/components/Question.js\";\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\nimport { handleAnswerQuestion } from \"../actions/questions\";\n\nvar Question =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Question, _Component);\n\n  function Question() {\n    _classCallCheck(this, Question);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Question).apply(this, arguments));\n  }\n\n  _createClass(Question, [{\n    key: \"handleAnswerClick\",\n    value: function handleAnswerClick(e) {\n      var _this$props = this.props,\n          dispatch = _this$props.dispatch,\n          authedUser = _this$props.authedUser,\n          question = _this$props.question;\n      var answer = e.target.id;\n      console.log(e.target); // need to pass it an info object that contains authedUser, qId, and answer\n\n      if (question.optionOne.votes.indexOf(authedUser) === -1 && question.optionTwo.votes.indexOf(authedUser) === -1) {\n        dispatch(handleAnswerQuestion({\n          authedUser: authedUser,\n          qId: question.id,\n          answer: answer\n        }));\n      } else {\n        alert(\"Oh yup. You can only select one answer!\");\n      }\n    }\n  }, {\n    key: \"checkIfAlreadyAnswered\",\n    value: function checkIfAlreadyAnswered() {}\n  }, {\n    key: \"render\",\n    value: function render() {\n      var id = this.props.id; // todo: call function to check if authedUser already answered question -> alert if they did\n      // todo: disable clicking if already answered\n\n      console.log(this.props);\n      var isDisabled1 = this.props.question.optionOne.votes.indexOf(this.props.authedUser) !== -1;\n      var isDisabled2 = this.props.question.optionTwo.votes.indexOf(this.props.authedUser) !== -1;\n      return React.createElement(Link, {\n        to: \"/questions/\".concat(id),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42\n        },\n        __self: this\n      }, React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43\n        },\n        __self: this\n      }, \"Would you rather...\"), React.createElement(\"button\", {\n        onClick: this.handleAnswerClick.bind(this),\n        className: \"btn btn-primary center-btn\",\n        id: \"optionOne\",\n        disabled: isDisabled1,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      }, this.props.firstOption), React.createElement(\"button\", {\n        onClick: this.handleAnswerClick.bind(this),\n        className: \"btn btn-primary\",\n        id: \"optionTwo\",\n        disabled: isDisabled2,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        },\n        __self: this\n      }, this.props.secondOption));\n    }\n  }]);\n\n  return Question;\n}(Component); // The first argument is data we are destructuring from the store { authedUser, users, questions }\n// The second argument is the regular props being passed into the Question component { id }\n\n\nfunction mapStateToProps(_ref, _ref2) {\n  var authedUser = _ref.authedUser,\n      users = _ref.users,\n      questions = _ref.questions;\n  var id = _ref2.id;\n  var question = questions[id];\n  var firstOption = question.optionOne.text;\n  var secondOption = question.optionTwo.text;\n  var user = users[id];\n  return {\n    authedUser: authedUser,\n    firstOption: firstOption,\n    secondOption: secondOption,\n    question: question // question: formatQuestion(question)\n\n  };\n}\n\nexport default connect(mapStateToProps)(Question);","map":{"version":3,"sources":["/Users/simranrai/Google Drive/Udacity/React Nanodegree/4. React and Redux/rend-p2-would-you-rather/src/components/Question.js"],"names":["React","Component","connect","BrowserRouter","Router","Route","Link","handleAnswerQuestion","Question","e","props","dispatch","authedUser","question","answer","target","id","console","log","optionOne","votes","indexOf","optionTwo","qId","alert","isDisabled1","isDisabled2","handleAnswerClick","bind","firstOption","secondOption","mapStateToProps","users","questions","text","user"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\nimport { handleAnswerQuestion } from \"../actions/questions\";\n\nclass Question extends Component {\n  handleAnswerClick(e) {\n    const { dispatch, authedUser, question } = this.props;\n    const answer = e.target.id;\n    console.log(e.target);\n    // need to pass it an info object that contains authedUser, qId, and answer\n    if (\n      question.optionOne.votes.indexOf(authedUser) === -1 &&\n      question.optionTwo.votes.indexOf(authedUser) === -1\n    ) {\n      dispatch(\n        handleAnswerQuestion({\n          authedUser,\n          qId: question.id,\n          answer\n        })\n      );\n    } else {\n      alert(\"Oh yup. You can only select one answer!\");\n    }\n  }\n\n  checkIfAlreadyAnswered() {}\n\n  render() {\n    const id = this.props.id;\n    // todo: call function to check if authedUser already answered question -> alert if they did\n    // todo: disable clicking if already answered\n    console.log(this.props);\n\n    let isDisabled1 =\n      this.props.question.optionOne.votes.indexOf(this.props.authedUser) !== -1;\n    let isDisabled2 =\n      this.props.question.optionTwo.votes.indexOf(this.props.authedUser) !== -1;\n\n    return (\n      <Link to={`/questions/${id}`}>\n        <h3>Would you rather...</h3>\n        <button\n          onClick={this.handleAnswerClick.bind(this)}\n          className={\"btn btn-primary center-btn\"}\n          id=\"optionOne\"\n          disabled={isDisabled1}\n        >\n          {this.props.firstOption}\n        </button>\n        <button\n          onClick={this.handleAnswerClick.bind(this)}\n          className={\"btn btn-primary\"}\n          id=\"optionTwo\"\n          disabled={isDisabled2}\n        >\n          {this.props.secondOption}\n        </button>\n      </Link>\n    );\n  }\n}\n\n// The first argument is data we are destructuring from the store { authedUser, users, questions }\n// The second argument is the regular props being passed into the Question component { id }\nfunction mapStateToProps({ authedUser, users, questions }, { id }) {\n  const question = questions[id];\n  const firstOption = question.optionOne.text;\n  const secondOption = question.optionTwo.text;\n  const user = users[id];\n  return {\n    authedUser,\n    firstOption,\n    secondOption,\n    question\n    // question: formatQuestion(question)\n  };\n}\n\nexport default connect(mapStateToProps)(Question);\n"]},"metadata":{},"sourceType":"module"}