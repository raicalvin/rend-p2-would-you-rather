{"ast":null,"code":"import _classCallCheck from \"/Users/simranrai/Google Drive/Udacity/React Nanodegree/4. React and Redux/rend-p2-would-you-rather/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/simranrai/Google Drive/Udacity/React Nanodegree/4. React and Redux/rend-p2-would-you-rather/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/simranrai/Google Drive/Udacity/React Nanodegree/4. React and Redux/rend-p2-would-you-rather/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/simranrai/Google Drive/Udacity/React Nanodegree/4. React and Redux/rend-p2-would-you-rather/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/simranrai/Google Drive/Udacity/React Nanodegree/4. React and Redux/rend-p2-would-you-rather/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/simranrai/Google Drive/Udacity/React Nanodegree/4. React and Redux/rend-p2-would-you-rather/src/components/Question.js\";\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\nimport { handleAnswerQuestion } from \"../actions/questions\";\n\nvar Question =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Question, _Component);\n\n  function Question() {\n    _classCallCheck(this, Question);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Question).apply(this, arguments));\n  }\n\n  _createClass(Question, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      console.log(\"Hellooooooooo what uPPPPPPP\");\n    }\n  }, {\n    key: \"handleAnswerClick\",\n    value: function handleAnswerClick(e) {\n      var _this$props = this.props,\n          dispatch = _this$props.dispatch,\n          authedUser = _this$props.authedUser,\n          question = _this$props.question;\n      var answer = e.target.id;\n      console.log(e.target); // need to pass it an info object that contains authedUser, qId, and answer\n\n      if (question.optionOne.votes.indexOf(authedUser) === -1 && question.optionTwo.votes.indexOf(authedUser) === -1) {\n        dispatch(handleAnswerQuestion({\n          authedUser: authedUser,\n          qId: question.id,\n          answer: answer\n        }));\n      } else {\n        alert(\"Oh yup. You can only select one answer!\");\n      }\n    }\n  }, {\n    key: \"checkIfAlreadyAnswered\",\n    value: function checkIfAlreadyAnswered() {}\n  }, {\n    key: \"render\",\n    value: function render() {\n      var id = this.props.id; // todo: call function to check if authedUser already answered question -> alert if they did\n      // todo: disable clicking if already answered\n\n      var avatarUrl = this.props.users[this.props.question.author].avatarURL;\n      var isDisabled1 = this.props.question.optionOne.votes.indexOf(this.props.authedUser) !== -1;\n      var isDisabled2 = this.props.question.optionTwo.votes.indexOf(this.props.authedUser) !== -1;\n      return React.createElement(Link, {\n        to: \"/questions/\".concat(id),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"center-flex-items\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        className: \"avatar\",\n        src: avatarUrl,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47\n        },\n        __self: this\n      })), React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      }, \"Would you rather...\"), React.createElement(\"div\", {\n        className: \"center-options-buttons\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        onClick: this.handleAnswerClick.bind(this),\n        className: \"btn btn-primary \",\n        id: \"optionOne\",\n        disabled: isDisabled1,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        },\n        __self: this\n      }, this.props.firstOption), React.createElement(\"button\", {\n        onClick: this.handleAnswerClick.bind(this),\n        className: \"btn btn-primary \",\n        id: \"optionTwo\",\n        disabled: isDisabled2,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }, this.props.secondOption)));\n    }\n  }]);\n\n  return Question;\n}(Component); // The first argument is data we are destructuring from the store { authedUser, users, questions }\n// The second argument is the regular props being passed into the Question component { id }\n\n\nfunction mapStateToProps(_ref, _ref2) {\n  var authedUser = _ref.authedUser,\n      users = _ref.users,\n      questions = _ref.questions;\n  var id = _ref2.id;\n  var question = questions[id];\n  var firstOption = question.optionOne.text;\n  var secondOption = question.optionTwo.text;\n  var user = users[id];\n  return {\n    authedUser: authedUser,\n    firstOption: firstOption,\n    secondOption: secondOption,\n    question: question,\n    users: users // question: formatQuestion(question)\n\n  };\n}\n\nexport default connect(mapStateToProps)(Question);","map":{"version":3,"sources":["/Users/simranrai/Google Drive/Udacity/React Nanodegree/4. React and Redux/rend-p2-would-you-rather/src/components/Question.js"],"names":["React","Component","connect","BrowserRouter","Router","Route","Link","handleAnswerQuestion","Question","console","log","e","props","dispatch","authedUser","question","answer","target","id","optionOne","votes","indexOf","optionTwo","qId","alert","avatarUrl","users","author","avatarURL","isDisabled1","isDisabled2","handleAnswerClick","bind","firstOption","secondOption","mapStateToProps","questions","text","user"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\nimport { handleAnswerQuestion } from \"../actions/questions\";\n\nclass Question extends Component {\n  componentDidMount() {\n    console.log(\"Hellooooooooo what uPPPPPPP\");\n  }\n  handleAnswerClick(e) {\n    const { dispatch, authedUser, question } = this.props;\n    const answer = e.target.id;\n    console.log(e.target);\n    // need to pass it an info object that contains authedUser, qId, and answer\n    if (\n      question.optionOne.votes.indexOf(authedUser) === -1 &&\n      question.optionTwo.votes.indexOf(authedUser) === -1\n    ) {\n      dispatch(\n        handleAnswerQuestion({\n          authedUser,\n          qId: question.id,\n          answer\n        })\n      );\n    } else {\n      alert(\"Oh yup. You can only select one answer!\");\n    }\n  }\n\n  checkIfAlreadyAnswered() {}\n\n  render() {\n    const id = this.props.id;\n    // todo: call function to check if authedUser already answered question -> alert if they did\n    // todo: disable clicking if already answered\n    let avatarUrl = this.props.users[this.props.question.author].avatarURL;\n\n    let isDisabled1 =\n      this.props.question.optionOne.votes.indexOf(this.props.authedUser) !== -1;\n    let isDisabled2 =\n      this.props.question.optionTwo.votes.indexOf(this.props.authedUser) !== -1;\n\n    return (\n      <Link to={`/questions/${id}`}>\n        <div className=\"center-flex-items\">\n          <img className=\"avatar\" src={avatarUrl} />\n        </div>\n        <h3>Would you rather...</h3>\n\n        <div className=\"center-options-buttons\">\n          <button\n            onClick={this.handleAnswerClick.bind(this)}\n            className=\"btn btn-primary \"\n            id=\"optionOne\"\n            disabled={isDisabled1}\n          >\n            {this.props.firstOption}\n          </button>\n          <button\n            onClick={this.handleAnswerClick.bind(this)}\n            className=\"btn btn-primary \"\n            id=\"optionTwo\"\n            disabled={isDisabled2}\n          >\n            {this.props.secondOption}\n          </button>\n        </div>\n      </Link>\n    );\n  }\n}\n\n// The first argument is data we are destructuring from the store { authedUser, users, questions }\n// The second argument is the regular props being passed into the Question component { id }\nfunction mapStateToProps({ authedUser, users, questions }, { id }) {\n  const question = questions[id];\n  const firstOption = question.optionOne.text;\n  const secondOption = question.optionTwo.text;\n  const user = users[id];\n  return {\n    authedUser,\n    firstOption,\n    secondOption,\n    question,\n    users\n    // question: formatQuestion(question)\n  };\n}\n\nexport default connect(mapStateToProps)(Question);\n"]},"metadata":{},"sourceType":"module"}